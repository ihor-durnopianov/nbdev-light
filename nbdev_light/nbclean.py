#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-
# GENERATED BY NBSYNC.  MODIFY AT YOUR OWN RISK.
"""Another simple tool to facilitate explorative programming.

Should be merged with nbsync.
"""


import json
import collections
import argparse
import logging


def main():
    """Entry point of the application."""
    args = _Parser().specify_args().parse_args()
    logging.basicConfig(level="INFO", format="%(levelname)s - %(message)s")
    logger = logging.getLogger(__name__)
    logger.info("processing %s", args.notebook)
    with open(args.notebook) as file:
        obj = json.load(file, object_hook=collections.OrderedDict)
    for cell in obj["cells"]:
        if cell["cell_type"] == "markdown":
            continue
        cell["execution_count"] = None
        if args.outputs:
            # Remove outputs completely
            if "outputs" in cell:
                cell["outputs"] = []
        else:
            # Clean outputs' execution_count
            outputs = cell.get("outputs", [])
            if outputs:
                for output in outputs:
                    output["execution_count"] = None
    if not args.force:
        logger.info("not --force, not overriding %s", args.notebook)
        return
    with open(args.notebook, "w") as file:
        json.dump(obj, file, indent=1, ensure_ascii=False)
        file.write("\n")


class _Parser(argparse.ArgumentParser):

    def specify_args(self):
        self.add_argument("notebook")
        self.add_argument("-f", "--force", action="store_true")
        self.add_argument("-o", "--outputs", action="store_true")
        return self


if __name__ == "__main__":
    main()
